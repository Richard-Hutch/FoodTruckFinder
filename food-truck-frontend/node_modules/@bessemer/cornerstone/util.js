import { isNil, isNull, isUndefined, isFunction, toInteger, forEach, compact, split as split$1, first, take, last, isArray, remove, isString, isEmpty, includes } from 'lodash-es';
export { add, after, ary, assign, assignIn, assignInWith, assignWith, at, attempt, before, bind, bindAll, bindKey, camelCase, capitalize, castArray, ceil, chain, chunk, clamp, clone, cloneDeep, cloneDeepWith, cloneWith, commit, compact, concat, cond, conforms, conformsTo, constant, countBy, create, curry, curryRight, debounce, deburr, defaultTo, defaults, defaultsDeep, defer, delay, difference, differenceBy, differenceWith, divide, drop, dropRight, dropRightWhile, dropWhile, each, eachRight, endsWith, entries, entriesIn, eq, escape, escapeRegExp, every, extend, extendWith, fill, filter, find, findIndex, findKey, findLast, findLastIndex, findLastKey, first, flatMap, flatMapDeep, flatMapDepth, flatten, flattenDeep, flattenDepth, flip, floor, flow, flowRight, forEach, forEachRight, forIn, forInRight, forOwn, forOwnRight, fromPairs, functions, functionsIn, get, groupBy, gt, gte, has, hasIn, head, identity, inRange, includes, indexOf, initial, intersection, intersectionBy, intersectionWith, invert, invertBy, invoke, invokeMap, isArguments, isArray, isArrayBuffer, isArrayLike, isArrayLikeObject, isBoolean, isBuffer, isDate, isElement, isEmpty, isEqual, isEqualWith, isError, isFinite, isFunction, isInteger, isLength, isMap, isMatch, isMatchWith, isNaN, isNative, isNil, isNull, isNumber, isObject, isObjectLike, isPlainObject, isRegExp, isSafeInteger, isSet, isString, isSymbol, isTypedArray, isUndefined, isWeakMap, isWeakSet, iteratee, join, kebabCase, keyBy, keys, keysIn, last, lastIndexOf, lowerCase, lowerFirst, lt, lte, map, mapKeys, mapValues, matches, matchesProperty, max, maxBy, mean, meanBy, memoize, merge, mergeWith, method, methodOf, min, minBy, multiply, negate, next, noop, now, nth, nthArg, omit, omitBy, once, orderBy, over, overArgs, overEvery, overSome, pad, padEnd, padStart, parseInt, partial, partialRight, partition, pick, pickBy, plant, property, propertyOf, pull, pullAll, pullAllBy, pullAllWith, pullAt, random, range, rangeRight, rearg, reduce, reduceRight, reject, remove, repeat, replace, result, reverse, round, sample, sampleSize, set, setWith, shuffle, size, slice, snakeCase, some, sortBy, sortedIndex, sortedIndexBy, sortedIndexOf, sortedLastIndex, sortedLastIndexBy, sortedLastIndexOf, sortedUniq, sortedUniqBy, spread, startCase, startsWith, stubArray, stubFalse, stubObject, stubString, stubTrue, subtract, sum, sumBy, tail, take, takeRight, takeRightWhile, takeWhile, tap, template, templateSettings, throttle, thru, times, toArray, toFinite, toInteger, toIterator, toJSON, toLength, toLower, toNumber, toPairs, toPairsIn, toPath, toPlainObject, toSafeInteger, toString, toUpper, transform, trim, trimEnd, trimStart, truncate, unary, unescape, union, unionBy, unionWith, uniq, uniqBy, uniqWith, uniqueId, unset, unzip, unzipWith, update, updateWith, upperCase, upperFirst, value, valueOf, values, valuesIn, without, words, wrap, wrapperAt, wrapperChain, wrapperCommit, wrapperLodash, wrapperNext, wrapperPlant, wrapperReverse, wrapperToIterator, wrapperValue, xor, xorBy, xorWith, zip, zipObject, zipObjectDeep, zipWith } from 'lodash-es';

var DIGITS = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];
var defaultList = function defaultList(val) {
  if (isNil(val)) {
    return [];
  }

  return val;
};
var defaultMap = function defaultMap(val) {
  if (isNil(val)) {
    return {};
  }

  return val;
};
var isPresent = function isPresent(obj) {
  return !isNull(obj) && !isUndefined(obj);
};
var isBlank = function isBlank(str) {
  if (str === null || str === undefined) str = '';
  return /^\s*$/.test(str);
};
var valueAt = function valueAt(array, index) {
  if (!isPresent(array) || !isPresent(index)) {
    return null;
  }

  if (!(array.length > index)) {
    return null;
  }

  return array[index];
};
var defaultString = function defaultString(string, _defaultString) {
  if (_defaultString === void 0) {
    _defaultString = '';
  }

  if (!isPresent(string)) {
    return _defaultString;
  }

  return string;
};
var valuate = function valuate(element) {
  if (isFunction(element)) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    return element.apply(void 0, args);
  }

  return element;
};
var buildPromise = function buildPromise() {
  var resolveVar = null;
  var rejectVar = null;
  var promise = new Promise(function (resolve, reject) {
    resolveVar = resolve;
    rejectVar = reject;
  });
  return [promise, resolveVar, rejectVar];
};
var conformInteger = function conformInteger(val) {
  if (isBlank(val)) {
    return null;
  }

  return toInteger(val);
};
var bound = function bound(val, lower, upper) {
  if (isPresent(lower) && val < lower) {
    return lower;
  }

  if (isPresent(upper) && val > upper) {
    return upper;
  }

  return val;
};
var valuesOrdered = function valuesOrdered(obj, paths) {
  var result = [];
  forEach(paths, function (path) {
    return result.push(obj[path]);
  });
  return compact(result);
};
var abs = function abs(value) {
  return Math.abs(value);
};
var replaceAt = function replaceAt(string, index, replace) {
  return string.substring(0, index) + replace + string.substring(index + 1);
};
var split = function split(string, splitString) {
  if (!isPresent(string)) {
    return [];
  }

  return split$1(string, splitString);
};
var splitFirst = function splitFirst(string, splitString) {
  var results = split(string, splitString);

  if (results.length === 1) {
    return results;
  }

  return [first(results), rest(results).join(splitString)];
};
var splitLast = function splitLast(string, splitString) {
  var results = split(string, splitString);

  if (results.length === 1) {
    return results;
  }

  return [take(results, results.length - 1).join(splitString), last(results)];
};
var removeStart = function removeStart(string, substring) {
  if (string.indexOf(substring) !== 0) {
    return string;
  }

  return string.slice(substring.length);
};
var removeFirst = function removeFirst(string, substring) {
  return replaceFirst(string, substring, '');
};
var removeAll = function removeAll(collection, values) {
  if (isArray(collection)) {
    return remove(collection, function (element) {
      return contains(values, element);
    });
  }

  if (isString(collection)) {
    for (var _iterator = values, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var string = _ref;
      collection = replaceAll(collection, string, '');
    }

    return collection;
  }
};
var replaceFirst = function replaceFirst(string, substring, replacement) {
  if (isNil(string)) {
    return string;
  }

  return string.replace(substring, replacement);
};
var escapeRegex = function escapeRegex(string) {
  return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
};
var replaceAll = function replaceAll(string, substring, replacement) {
  if (isNil(string)) {
    return string;
  }

  var regex = escapeRegex(substring);
  return string.replace(new RegExp(regex, 'g'), replacement);
};
var rest = function rest(array) {
  if (array.length <= 1) {
    return [];
  } // eslint-disable-next-line no-unused-vars


  var first = array[0],
      rest = array.slice(1);
  return rest;
};
var emptyToNull = function emptyToNull(string) {
  if (isEmpty(string)) {
    return null;
  }

  return string;
};
var randomUuid = function randomUuid() {
  // For older browsers use the less robust Math.random()
  if (typeof crypto === 'undefined') {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
      var r = Math.random() * 16 | 0,
          v = c == 'x' ? r : r & 0x3 | 0x8;
      return v.toString(16);
    });
  }

  return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, function (c) {
    return (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16);
  });
};
var contains = includes;

export { DIGITS, abs, bound, buildPromise, conformInteger, contains, defaultList, defaultMap, defaultString, emptyToNull, escapeRegex, isBlank, isPresent, randomUuid, removeAll, removeFirst, removeStart, replaceAll, replaceAt, replaceFirst, rest, split, splitFirst, splitLast, valuate, valueAt, valuesOrdered };
