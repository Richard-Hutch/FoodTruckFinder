import { join, filter, startsWith, map, find, isEmpty } from 'lodash-es';
import { splitFirst, splitLast, contains, removeAll, split, isPresent, DIGITS } from './util.js';

var charactersToKeep = [].concat(DIGITS, ['+']);
var normalizePhoneNumber = function normalizePhoneNumber(phone) {
  var _splitFirst = splitFirst(phone, ';'),
      phonePart = _splitFirst[0],
      parameterPart = _splitFirst[1];

  var _splitLast = splitLast(phonePart, 'x'),
      numberPart = _splitLast[0],
      extensionPart = _splitLast[1];

  var normalizedNumber = join(filter(numberPart, function (character) {
    return contains(charactersToKeep, character);
  }), '');
  var hasPlus = startsWith(normalizedNumber, '+');
  normalizedNumber = removeAll(normalizedNumber, ['+']);
  var parameters = map(split(parameterPart, ';'), function (parameter) {
    return splitFirst(parameter, '=');
  }); // If we couldn't find an extension in the parameters section, lets try to find one in the AAA AAA AAAAxZZZZ format

  var extensionParameter = find(parameters, function (_ref) {
    var key = _ref[0],
        _ = _ref[1];
    return key === 'ext';
  });

  if (!isPresent(extensionParameter) && isPresent(extensionPart)) {
    parameters.push(['ext', extensionPart]);
  }

  var normalized = normalizedNumber;

  if (hasPlus) {
    normalized = '+' + normalized;
  }

  if (!isEmpty(parameters)) {
    normalized = normalized + ';';
  }

  normalized = normalized + join(map(parameters, function (parameter) {
    return join(parameter, '=');
  }), ';');
  return normalized;
};

export { normalizePhoneNumber };
